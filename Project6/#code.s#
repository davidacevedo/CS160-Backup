# Start Program
.data
printstr: .asciz "%d\n"
.globl Main_main

#Class Node: classA
#Declaration Node
#Declaration Node
#Method Node
classA_inc:
#Method Body
	push %ebp
	mov %esp, %ebp
	 sub $0, %esp
#Variable Node: x
#We will grab this variable at the offset of 0	then we will push it to the top like an integer literal
	mov 4(%ebp), %eax
	push 0(%eax)

#Integer Literal Node: We grab the literal number of 2
	push $2
#Times Node: Multiplies the first two things on top of the stack
	pop %edx
	pop %eax
	imul %edx, %eax
	push %eax
#Assignment Node: We will be assigning x
	pop %edx
	mov 4(%ebp), %eax
	mov %edx,0(%eax)
#Variable Node: y
#We will grab this variable at the offset of 0	then we will push it to the top like an integer literal
	mov 4(%ebp), %eax
	push 4(%eax)
#Integer Literal Node: We grab the literal number of 1
	push $1
#Plus Node: Plusses the first two things on top of the stack
	pop %edx
	pop %eax
	add %edx, %eax
	push %eax
#Assignment Node: We will be assigning y
	pop %edx
	mov 4(%ebp), %eax
	mov %edx,0(%ebp)
	#push $printstr
	#call printf
	leave
	ret
#Class Node: Main
#Method Node
Main_main:
#Method Body
	push %ebp
	mov %esp, %ebp
	 sub $8, %esp
#Declaration Node
#Declaration Node
#New Node
push $8
call malloc
add $4 , %esp
push %eax
mov %eax, %ecx
#Assignment Node: We will be assigning a
	pop %edx
	mov %edx,-4(%ebp)
#Integer Literal Node: We grab the literal number of 2
	push $2
#Assignment Node: We will be assigning a
	pop %edx
mov -4(%ebp), %eax
mov %edx, 0(%eax)
#Integer Literal Node: We grab the literal number of 3
	push $3
#Assignment Node: We will be assigning a
	pop %edx
mov -4(%ebp), %eax
mov %edx, 4(%eax)
#Member Access Node
mov -4(%ebp), %eax
push 0(%eax)
#Print Node: Calls printf so we can see our results
	push $printstr
	call printf
#Member Access Node
mov -4(%ebp), %eax
push 4(%eax)
#Print Node: Calls printf so we can see our results
	push $printstr
	call printf
#Integer Literal Node: We grab the literal number of 0
	push $0
#Assignment Node: We will be assigning i
	pop %edx
	mov %edx,-8(%ebp)
#While Node
label_0:
#Variable Node: i
#We will grab this variable at the offset of -8	then we will push it to the top like an integer literal
	mov -8(%ebp), %eax
	push %eax
#Integer Literal Node: We grab the literal number of 5
	push $5
#Less Node
	pop %edx
	pop %eax
	cmp %edx, %eax
	jl label_2
	push $0
	jmp label_3
	label_2:
	push $1
	label_3:
pop %eax
cmp $0, %eax
je label_1
#Call Node
#Method Call Node
push 8(%ebp)
push $printstr
call classA_inc
#Member Access Node
mov -4(%ebp), %eax
push 0(%eax)
#Print Node: Calls printf so we can see our results
	push $printstr
	call printf
#Member Access Node
mov -4(%ebp), %eax
push 4(%eax)
#Print Node: Calls printf so we can see our results
	push $printstr
	call printf
#Variable Node: i
#We will grab this variable at the offset of -8	then we will push it to the top like an integer literal
	mov -8(%ebp), %eax
	push %eax
#Integer Literal Node: We grab the literal number of 1
	push $1
#Plus Node: Plusses the first two things on top of the stack
	pop %edx
	pop %eax
	add %edx, %eax
	push %eax
#Assignment Node: We will be assigning i
	pop %edx
	mov %edx,-8(%ebp)
jmp label_0
label_1:
	leave
	ret
