.data
print_str:	 .asciz "%d\n"
	.text
	.globl Main_main
Main_main:
	 push $5
	 push $6
	 push $2
	 # DIVIDE
	 pop %ebx
	 pop %eax
	 cdq
	 idiv %ebx
	 push %eax
	 # PLUS
	 pop %edx
	 pop %eax
	 add %edx, %eax
	 push %eax
	 push $1
	 # MINUS
	 pop %edx
	 pop %eax
	 sub %edx, %eax
	 push %eax
	 # PRINT
	 push $print_str
	 call printf
	 leave
	 ret
	 #HI# Start Program
.data
printstr: .asciz "%d\n"


.globl Main_main

#Class Node: classA
#Method Node
classA_f0:
#Parameter Node
#Parameter Node
#Method Body
	push %ebp
	mov %esp, %ebp
	 sub $4, %esp
#Declaration Node
#If Else Node
#Variable Node: y
#We will grab this variable at the offset of 12	then we will push it to the top like an integer literal
	mov 12(%ebp), %eax
	push %eax
	pop %eax
	cmp $0,  %eax
	je label_0
#Variable Node: x
#We will grab this variable at the offset of 8	then we will push it to the top like an integer literal
	mov 8(%ebp), %eax
	push %eax
#Variable Node: x
#We will grab this variable at the offset of 8	then we will push it to the top like an integer literal
	mov 8(%ebp), %eax
	push %eax
#Times Node: Multiplies the first two things on top of the stack
	pop %edx
	pop %eax
	imul %edx, %eax
	push %eax
#Assignment Node: We will be assigning val
	pop %edx
	mov %edx,-4(%ebp)
	jmp label_1
	label_0:
#Variable Node: x
#We will grab this variable at the offset of 8	then we will push it to the top like an integer literal
	mov 8(%ebp), %eax
	push %eax
#Integer Literal Node: We grab the literal number of 2
	push $2
#Divide Node: Divides the first two things on top of the stack
	pop %ebx
	pop %eax
	cdq
	idiv %ebx
	push %eax
#Assignment Node: We will be assigning val
	pop %edx
	mov %edx,-4(%ebp)
	label_1:
#Variable Node: val
#We will grab this variable at the offset of -4	then we will push it to the top like an integer literal
	mov -4(%ebp), %eax
	push %eax
#Return Statement Node
pop %eax
	leave
	ret
#Method Node
classA_doAll:
#Method Body
	push %ebp
	mov %esp, %ebp
	 sub $0, %esp
#Method Call Node
#Boolean Literal Node: We grab the literal bool of 1
	push $1
#Integer Literal Node: We grab the literal number of 5
	push $5
call classA_f0
pop %edx
pop %edx
push %eax
#Print Node: Calls printf so we can see our results
	push $printstr
	call printf
#Method Call Node
#Boolean Literal Node: We grab the literal bool of 0
	push $0
#Integer Literal Node: We grab the literal number of 6
	push $6
call classA_f0
pop %edx
pop %edx
push %eax
#Print Node: Calls printf so we can see our results
	push $printstr
	call printf
	leave
	ret
#Class Node: Main
#Method Node
Main_main:
#Method Body
	push %ebp
	mov %esp, %ebp
	 sub $4, %esp
#Declaration Node
#Call Node
#Method Call Node
call classA_doAll
	leave
	ret
	
	