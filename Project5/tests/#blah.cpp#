void DC(){

  long long int *q = new long long int[numberOfStations+1];
  long long int *t = new long long int[numberOfStations+1];

  for (int st = 1; st <= numberOfStations; st++){
    dcTree->stations[st].dist = getPower(sourceStation,st);
    //cout << dcTree->stations[st].dist << endl;
  }
  dcTree->sortByDist(sourceStation,numberOfStations);
  
  ACF_DC(q, t, 1, floor(numberOfStations/4), 0);
  ACF_DC(q, t, floor(numberOfStations/4)+1 , 2*floor(numberOfStations/4),1);
  ACF_DC(q, t, 2*floor(numberOfStations/4)+1 , 3*floor(numberOfStations/4),1);
  ACF_DC(q, t, 3*floor(numberOfStations/4)+1 , numberOfStations,1 );


  for (int st = 1; st <= numberOfStations; st++){
    // cout<< "DIST: " << dcTree->stations[st].dist << " --- VAL " << dcTree->stations[st].value <<
    // " X: " << dcTree->stations[st].x << "  Y : " << dcTree->stations[st].y <<  endl; 
    int position = dcTree->stations[st].value;
    tree->stations[position] = dcTree->stations[st];
  }
}

void ACF_DC(long long int *q, long long int *t, int begin, int end, int flag){

  int currentLength = end - begin + 1;

  // Unmark all stations
  for(int i=begin;i<=end;i++){
    r[dcTree->stations[i].value] = 0;
    dcTree->stations[i].algMarked = false;
  }


  int i;
  if(flag == 0){
    i = 2;
    // Mark source station
    dcTree->stations[1].algMarked = true;
  } else {
    i = 1; 
  }

  // Add a station
  // Checking unmarked stations added to ACF
  for(;i<=currentLength;i++){
    int j=-1, l=-1;
    long long int minP_jl = LLONG_MAX;

    // ***** FINDING THE CHEAPEST ONE AMONG ALL NEWLY ADDED STATIONS
    // ***** FOR EACH J, FIND THE SMALLEST J HAVING LOWEST POWER
    // For each unmarked j
    for(int findJ=begin;findJ<=end;findJ++){ 
      if(dcTree->stations[findJ].algMarked==false){
        
        // Mark Oj
        dcTree->stations[findJ].algMarked=true;
        r[dcTree->stations[findJ].value]= 0;

        // For each marked l 
        // ***** FOR EACH L, FIND L THAT BEST SEND TO J
        for(int findL=1;findL<=end;findL++){
          if(dcTree->stations[findL].algMarked==true && findL!=findJ){
            for(int k=1;k<=end;k++){
              q[dcTree->stations[k].value] = r[dcTree->stations[k].value];
            }


            q[dcTree->stations[findL].value] = 
              getMax(q[dcTree->stations[findL].value], getPowerFromTree(findL,findJ));
            // FIND MARKED STATION TO PASS INTO TREE FUNCTION
            int count = 0;
            for (int findS = 1; findS <= end; findS++){
              if(dcTree->stations[findS].algMarked == true)
                count++;
            }
            
            // S here Must be sorted by StationID.
            int *S = new int[count+1]; // S is an array 
            int Sindex = 1;
            for (int findS = 1; findS <= end; findS++){
              if(dcTree->stations[findS].algMarked == true){
                S[Sindex] = dcTree->stations[findS].value;
                Sindex++;
              }
            }

            int tempSt = 0;
            for(int sortS=1;sortS<=count;sortS++){
              for(int s=1;s<count;s++){
                if (S[s+1] < S[s]){
                  tempSt = S[s];
                  S[s]= S[s+1];
                  S[s+1] = tempSt;
                }
              }
            }

            StationTree *T = new StationTree(count+1); 
            T = produceTree(q, S, count+1);
            
            // UPDATING BEST J AND L
            if(findL!=findJ){
              long long int tempP_jl = getLowestPower(T);
              if(minP_jl>tempP_jl){
                j = findJ;
                l = findL;
                minP_jl = tempP_jl;
              } 
              else if(minP_jl==tempP_jl){
                if(dcTree->stations[j].value>dcTree->stations[findJ].value){
                  j = findJ;
                  l = findL;
                } else if(dcTree->stations[j].value==dcTree->stations[findJ].value){
                  if(dcTree->stations[l].value>dcTree->stations[findL].value){
                    l = findL;
                  }
                }
              }
            }
          }
        }

        // Unmark Oj

        dcTree->stations[findJ].algMarked = false;
      }
    }

    // Mark Oj
    dcTree->stations[j].algMarked = true;

    r[dcTree->stations[l].value] = getMax(r[dcTree->stations[l].value],getPowerFromTree(l,j));

    // FIND ALL THE MARKED STATIONS AND PASS TO THE TREE FUNCTION TO FIND THE BEST VALUE
    int count = 0;
    for (int findS = 1; findS <= end; findS++){
      if(dcTree->stations[findS].algMarked == true)
        count++; 
    }
    int *S = new int[count+1]; // S is an array 
    int Sindex = 1;
    for (int findS = 1; findS <= end; findS++){
      if(dcTree->stations[findS].algMarked == true){
        S[Sindex] = dcTree->stations[findS].value;
        Sindex++;
      }
    }

    int tempSt = 0;
    for(int sortS=1;sortS<=count;sortS++){
      for(int s=1;s<count;s++){
        if (S[s+1] < S[s]){
          tempSt = S[s];
          S[s]= S[s+1];
          S[s+1] = tempSt;
        }
      }
    }

    StationTree *T = new StationTree(count+1); 
    T = produceTree(r, S, count+1);
    for(int treeImage = 1; treeImage < T->size; treeImage++){
      for (int dcImage = 1; dcImage <=end; dcImage++){  
        if(T->stations[treeImage].value == dcTree->stations[dcImage].value){
          dcTree->stations[dcImage].parent = T->stations[treeImage].parent;
        }
      }
      
    }

    for (int t_index = 1; t_index <= count; t_index++){
      t[S[t_index]] = getTransmissionRate(S[t_index],T);
      r[S[t_index]] = t[S[t_index]];
    }
  } 
}void DC(){

  long long int *q = new long long int[numberOfStations+1];
  long long int *t = new long long int[numberOfStations+1];

  for (int st = 1; st <= numberOfStations; st++){
    dcTree->stations[st].dist = getPower(sourceStation,st);
    //cout << dcTree->stations[st].dist << endl;
  }
  dcTree->sortByDist(sourceStation,numberOfStations);
  
  ACF_DC(q, t, 1, floor(numberOfStations/4), 0);
  ACF_DC(q, t, floor(numberOfStations/4)+1 , 2*floor(numberOfStations/4),1);
  ACF_DC(q, t, 2*floor(numberOfStations/4)+1 , 3*floor(numberOfStations/4),1);
  ACF_DC(q, t, 3*floor(numberOfStations/4)+1 , numberOfStations,1 );


  for (int st = 1; st <= numberOfStations; st++){
    // cout<< "DIST: " << dcTree->stations[st].dist << " --- VAL " << dcTree->stations[st].value <<
    // " X: " << dcTree->stations[st].x << "  Y : " << dcTree->stations[st].y <<  endl; 
    int position = dcTree->stations[st].value;
    tree->stations[position] = dcTree->stations[st];
  }
}

void ACF_DC(long long int *q, long long int *t, int begin, int end, int flag){

  int currentLength = end - begin + 1;

  // Unmark all stations
  for(int i=begin;i<=end;i++){
    r[dcTree->stations[i].value] = 0;
    dcTree->stations[i].algMarked = false;
  }


  int i;
  if(flag == 0){
    i = 2;
    // Mark source station
    dcTree->stations[1].algMarked = true;
  } else {
    i = 1; 
  }

  // Add a station
  // Checking unmarked stations added to ACF
  for(;i<=currentLength;i++){
    int j=-1, l=-1;
    long long int minP_jl = LLONG_MAX;

    // ***** FINDING THE CHEAPEST ONE AMONG ALL NEWLY ADDED STATIONS
    // ***** FOR EACH J, FIND THE SMALLEST J HAVING LOWEST POWER
    // For each unmarked j
    for(int findJ=begin;findJ<=end;findJ++){ 
      if(dcTree->stations[findJ].algMarked==false){
        
        // Mark Oj
        dcTree->stations[findJ].algMarked=true;
        r[dcTree->stations[findJ].value]= 0;

        // For each marked l 
        // ***** FOR EACH L, FIND L THAT BEST SEND TO J
        for(int findL=1;findL<=end;findL++){
          if(dcTree->stations[findL].algMarked==true && findL!=findJ){
            for(int k=1;k<=end;k++){
              q[dcTree->stations[k].value] = r[dcTree->stations[k].value];
            }


            q[dcTree->stations[findL].value] = 
              getMax(q[dcTree->stations[findL].value], getPowerFromTree(findL,findJ));
            // FIND MARKED STATION TO PASS INTO TREE FUNCTION
            int count = 0;
            for (int findS = 1; findS <= end; findS++){
              if(dcTree->stations[findS].algMarked == true)
                count++;
            }
            
            // S here Must be sorted by StationID.
            int *S = new int[count+1]; // S is an array 
            int Sindex = 1;
            for (int findS = 1; findS <= end; findS++){
              if(dcTree->stations[findS].algMarked == true){
                S[Sindex] = dcTree->stations[findS].value;
                Sindex++;
              }
            }

            int tempSt = 0;
            for(int sortS=1;sortS<=count;sortS++){
              for(int s=1;s<count;s++){
                if (S[s+1] < S[s]){
                  tempSt = S[s];
                  S[s]= S[s+1];
                  S[s+1] = tempSt;
                }
              }
            }

            StationTree *T = new StationTree(count+1); 
            T = produceTree(q, S, count+1);
            
            // UPDATING BEST J AND L
            if(findL!=findJ){
              long long int tempP_jl = getLowestPower(T);
              if(minP_jl>tempP_jl){
                j = findJ;
                l = findL;
                minP_jl = tempP_jl;
              } 
              else if(minP_jl==tempP_jl){
                if(dcTree->stations[j].value>dcTree->stations[findJ].value){
                  j = findJ;
                  l = findL;
                } else if(dcTree->stations[j].value==dcTree->stations[findJ].value){
                  if(dcTree->stations[l].value>dcTree->stations[findL].value){
                    l = findL;
                  }
                }
              }
            }
          }
        }

        // Unmark Oj

        dcTree->stations[findJ].algMarked = false;
      }
    }

    // Mark Oj
    dcTree->stations[j].algMarked = true;

    r[dcTree->stations[l].value] = getMax(r[dcTree->stations[l].value],getPowerFromTree(l,j));

    // FIND ALL THE MARKED STATIONS AND PASS TO THE TREE FUNCTION TO FIND THE BEST VALUE
    int count = 0;
    for (int findS = 1; findS <= end; findS++){
      if(dcTree->stations[findS].algMarked == true)
        count++; 
    }
    int *S = new int[count+1]; // S is an array 
    int Sindex = 1;
    for (int findS = 1; findS <= end; findS++){
      if(dcTree->stations[findS].algMarked == true){
        S[Sindex] = dcTree->stations[findS].value;
        Sindex++;
      }
    }

    int tempSt = 0;
    for(int sortS=1;sortS<=count;sortS++){
      for(int s=1;s<count;s++){
        if (S[s+1] < S[s]){
          tempSt = S[s];
          S[s]= S[s+1];
          S[s+1] = tempSt;
        }
      }
    }

    StationTree *T = new StationTree(count+1); 
    T = produceTree(r, S, count+1);
    for(int treeImage = 1; treeImage < T->size; treeImage++){
      for (int dcImage = 1; dcImage <=end; dcImage++){  
        if(T->stations[treeImage].value == dcTree->stations[dcImage].value){
          dcTree->stations[dcImage].parent = T->stations[treeImage].parent;
        }
      }
      
    }

    for (int t_index = 1; t_index <= count; t_index++){
      t[S[t_index]] = getTransmissionRate(S[t_index],T);
      r[S[t_index]] = t[S[t_index]];
    }
  } 
}